buildscript {
  repositories {
    maven {
      url 'https://plugins.gradle.org/m2/'
    }
  }
  dependencies {
    classpath 'io.spring.gradle:dependency-management-plugin:1.0.2.RELEASE'
    classpath "com.netflix.nebula:gradle-extra-configurations-plugin:3.1.0"
    classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.4'
    classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.0'
    classpath 'com.moowork.gradle:gradle-node-plugin:1.1.1'
    classpath 'org.jfrog.buildinfo:build-info-extractor-gradle:4.4.0'
  }
}

// TODO improve
def buildNumber = System.env.'TRAVIS_BUILD_NUMBER' ?: (/* SonarSource infrastructure: */ System.env.'CI_BUILD_NUMBER' ?: null)
def versionSuffix = buildNumber == null
  ? '-SNAPSHOT'
  : ('.0.' + buildNumber)

allprojects {
  apply plugin: 'com.jfrog.artifactory'

  group = 'org.sonarsource.sonarqube'
  version = '6.4' + versionSuffix

  repositories {
    mavenLocal()
    maven {
      url 'https://repox.sonarsource.com/sonarsource'
    }
  }
}

subprojects {
  apply plugin: 'nebula.provided-base'

  // even if it has troubles with dynamic versions ( https://github.com/spring-gradle-plugins/dependency-management-plugin/issues/151 )
  // in contrast to nebula-dependency-recommender it supports not just versions, but also exclusions
  apply plugin: 'io.spring.dependency-management'
  dependencyManagement {
    dependencies {
      dependency('org.codehaus.sonar:sonar-channel:4.1') {
        exclude 'org.slf4j:slf4j-api'
      }
      dependency 'org.codehaus.sonar:sonar-classloader:1.0'
      dependency 'org.sonarsource.update-center:sonar-update-center-common:1.18.0.487'
      dependency('org.codehaus.sonar:sonar-squid:4.1') {
        exclude 'org.codehaus.sonar:sonar-check-api'
      }
      dependency 'net.java.dev.jna:jna:4.1.0'
      dependency 'com.hazelcast:hazelcast:3.8'
      dependency 'com.hazelcast:hazelcast-client:3.8'
      dependency 'org.elasticsearch:elasticsearch:2.4.4'
      dependency 'com.github.tlrx:elasticsearch-test:1.2.1'
      dependency 'com.google.guava:guava:18.0'
      dependency 'com.google.code.findbugs:jsr305:3.0.0'
      dependency 'commons-dbutils:commons-dbutils:1.5'
      dependency 'commons-io:commons-io:2.4'
      dependency 'org.apache.commons:commons-csv:1.0'
      dependency 'commons-codec:commons-codec:1.8'
      dependency 'org.apache.commons:commons-email:1.3.2'
      dependency 'commons-lang:commons-lang:2.6'
      dependency 'commons-dbcp:commons-dbcp:1.4'
      dependency('commons-beanutils:commons-beanutils:1.8.3') {
        exclude 'commons-logging:commons-logging'
      }
      dependency 'com.ibm.icu:icu4j:3.4.4'
      dependency('com.googlecode.json-simple:json-simple:1.1.1') {
        exclude 'junit:junit'
      }
      dependency 'io.jsonwebtoken:jjwt:0.6.0'
      dependencySet(group: 'com.fasterxml.jackson.core', version: '2.6.6') {
        entry 'jackson-core'
        entry 'jackson-databind'
        entry 'jackson-annotations'
      }
      dependency 'org.mybatis:mybatis:3.2.7'
      dependency 'org.nanohttpd:nanohttpd:2.3.0'
      dependency 'org.picocontainer:picocontainer:2.15'
      dependencySet(group: 'org.slf4j', version: '1.7.21') {
        entry 'slf4j-api'
        entry 'jul-to-slf4j'
        entry 'jcl-over-slf4j'
        entry 'log4j-over-slf4j'
      }
      dependencySet(group: 'ch.qos.logback', version: '1.1.7') {
        entry 'logback-access'
        entry 'logback-classic'
        entry 'logback-core'
      }
      dependency 'com.h2database:h2:1.3.176'
      dependency 'com.microsoft.sqlserver:mssql-jdbc:6.1.0.jre8'
      dependency 'mysql:mysql-connector-java:5.1.39'
      dependency 'com.oracle:ojdbc6:11.2.0.3.0'
      dependency 'org.postgresql:postgresql:9.4.1209.jre7'
      dependency('org.codehaus.woodstox:woodstox-core-lgpl:4.4.0') {
        exclude 'javax.xml.stream:stax-api'
      }
      dependency('org.codehaus.staxmate:staxmate:2.0.1') {
        exclude 'org.codehaus.woodstox:stax2-api'
        exclude 'stax:stax-api'
        exclude 'org.codehaus.woodstox:woodstox-core-asl'
      }
      dependency('org.mockito:mockito-core:1.10.19') {
        exclude 'org.hamcrest:hamcrest-core'
      }
      dependency 'org.assertj:assertj-core:3.4.1'
      dependency 'org.assertj:assertj-guava:3.1.0'
      dependency('org.codehaus.woodstox:stax2-api:3.1.4') {
        exclude 'stax:stax-api'
      }
      dependency 'javax.servlet:javax.servlet-api:3.0.1'
      dependency 'org.eclipse.jetty:jetty-server:8.1.12.v20130726'
      dependency 'org.hamcrest:hamcrest-all:1.3'
      dependency 'junit:junit:4.12'
      dependency 'com.tngtech.java:junit-dataprovider:1.9.2'
      dependency('org.dbunit:dbunit:2.4.5') {
        exclude 'commons-lang:commons-lang'
        exclude 'xerces:xmlParserAPIs'
        exclude 'xerces:xercesImpl'
      }
      dependency 'org.eclipse.jetty:test-jetty-servlet:8.1.12.v20130726'
      dependency 'org.reflections:reflections:0.9.9'
      dependency 'com.google.code.gson:gson:2.3.1'
      dependency('org.sonarsource:sonar-persistit:3.3.2') {
        exclude 'commons-logging:commons-logging'
      }
      dependency 'com.github.kevinsawicki:http-request:5.4.1'
      dependency 'org.codehaus.sonar.runner:sonar-runner-api:2.4'
      dependency 'org.freemarker:freemarker:2.3.20'
      dependency 'com.google.protobuf:protobuf-java:3.0.0-beta-2'
      dependency 'net.jpountz.lz4:lz4:1.3.0'
      dependency 'org.subethamail:subethasmtp:3.1.7'
      dependencySet(group: 'org.apache.tomcat.embed', version: '8.5.11') {
        entry 'tomcat-embed-core'
        entry('tomcat-embed-jasper') {
          exclude 'org.eclipse.jdt.core.compiler:ecj'
        }
      }
      dependencySet(group: 'com.squareup.okhttp3', version: '3.3.1') {
        entry 'okhttp'
        entry 'mockwebserver'
      }
      // TODO provided
      dependency 'xml-apis:xml-apis:1.4.01'
    }
  }

  apply plugin: 'java-library'
  sourceCompatibility = 1.8
  tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
  }

  def tempDir = file("$buildDir/temp")
  test.doFirst {
    // TODO note that due to this any change in this file (even addition of blank line) is considered as modification of input for tests
    delete tempDir
    tempDir.mkdirs()
  }
  test {
    systemProperty 'java.io.tmpdir', tempDir
    maxHeapSize = "512m"
  }

  apply plugin: 'com.google.protobuf'
  sourceSets.main.proto.srcDir 'src/main/protobuf'  // in addition to the default 'src/main/proto'
  sourceSets.test.proto.srcDir 'src/test/protobuf'  // in addition to the default 'src/test/proto'
  protobuf {
    protoc {
      artifact = 'com.google.protobuf:protoc:3.0.0-beta-2'
    }
  }
}

configurations {
  archives
}

// TODO requires review
artifactory {
  clientConfig.setIncludeEnvVars(true)
  clientConfig.setEnvVarsExcludePatterns('*password*,*PASSWORD*,*secret*,*MAVEN_CMD_LINE_ARGS*,sun.java.command,*token*,*TOKEN*,*LOGIN*,*login*')
  contextUrl = System.getenv('ARTIFACTORY_URL')
  publish {
    repository {
      repoKey = System.getenv('ARTIFACTORY_DEPLOY_REPO')
      username = System.getenv('ARTIFACTORY_DEPLOY_USERNAME')
      password = System.getenv('ARTIFACTORY_DEPLOY_PASSWORD')
    }
    defaults {
      properties = [
        'vcs.revision': (System.getenv('GIT_COMMIT') ?: System.getenv('TRAVIS_COMMIT')),
        'vcs.branch': (System.getenv('GIT_BRANCH') ?: System.getenv('TRAVIS_BRANCH')),
        'build.name': 'sonarlint-intellij',
        'build.number': (System.getenv('BUILD_ID') ?: System.getenv('TRAVIS_BUILD_NUMBER'))
      ]
      publications('mavenJava')
      publishPom = true // Publish generated POM files to Artifactory (true by default)
      publishIvy = false // Publish generated Ivy descriptor files to Artifactory (true by default)
    }
  }
  clientConfig.info.setBuildNumber(System.getenv('TRAVIS_BUILD_NUMBER'))
}

artifactoryPublish {
  publish {
  }
  mavenDescriptor = file('pom.xml')
}
